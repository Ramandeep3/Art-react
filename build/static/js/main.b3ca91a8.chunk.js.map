{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","process","API_KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","console","error","Feature","featuredResult","id","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","toLowerCase","map","person","key","displayname","length","image","baseimageurl","src","alt","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","results","disabled","prev","next","record","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","catch","onSubmit","htmlFor","type","placeholder","onChange","target","name","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3ca91a8.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = process.env.API_KEY;\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React,{Fragment} from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\n const Searchable = ({ searchTerm, searchValue, setIsLoading, setSearchResults }) => {\n\n  return (\n      <span className=\"content\">\n          <a href=\"#\" onClick={async (event) => {\n              event.preventDefault();\n              setIsLoading(true);\n              try {\n                  const data = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue);\n                  setSearchResults(data);\n              } catch (error) {\n                  console.error(error);\n              } finally {\n                  setIsLoading(false);\n              }\n          }}>{searchValue}</a>\n      </span>\n  )\n}\n\n\nconst Feature = ({\n  featuredResult,\n  searchTerm,\n  searchValue,\n  setIsLoading,\n  setSearchResults,\n}) => {\n  if (!featuredResult) {\n      return <main id=\"feature\"></main>;\n  }\n\n  const {\n      title,\n      dated,\n      images,\n      primaryimageurl,\n      description,\n      culture,\n      style,\n      technique,\n      medium,\n      dimensions,\n      people,\n      department,\n      division,\n      contact,\n      creditline,\n  } = featuredResult;\n\n  return (\n      <main id=\"feature\">\n          <div className=\"object-feature\">\n              <header>\n                  <h3>{title}</h3>\n                  <h4>{dated}</h4>\n              </header>\n              <section className=\"facts\">\n                  {culture ? <>\n                      <span className=\"title\">Culture</span>\n                      <Searchable\n                          searchTerm=\"culture\"\n                          searchValue={culture}\n                          setIsLoading={setIsLoading}\n                          setSearchResults={setSearchResults}\n                      />\n                  </> : null}\n                  {medium ? <>\n                      <span className=\"title\">Medium</span>\n                      <Searchable\n                          searchTerm=\"medium\"\n                          searchValue={medium.toLowerCase()}\n                          setIsLoading={setIsLoading}\n                          setSearchResults={setSearchResults}\n                      />\n                  </> : null}\n                  {technique ? <>\n                      <span className=\"title\">Technique</span>\n                      <Searchable\n                          searchTerm=\"technique\"\n                          searchValue={technique}\n                          setIsLoading={setIsLoading}\n                          setSearchResults={setSearchResults}\n                      />\n                  </> : null}\n                  {people ? (\n                      people.map((person) =>\n                          <Fragment key={person.displayname}>\n                              <span className=\"title\">People</span>\n                              <Searchable\n                                  searchTerm=\"person\"\n                                  searchValue={person.displayname}\n                                  setIsLoading={setIsLoading}\n                                  setSearchResults={setSearchResults}\n                              />\n                          </Fragment>\n                      )\n                  ) : null}\n\n                  {dimensions ? (\n                      <>\n                          <span className=\"title\">Dimensions</span>\n                          <span className=\"content\">{dimensions}</span>\n                      </>\n                  ) : null}\n\n                  {department ? (\n                      <>\n                          <span className=\"title\">Department</span>\n                          <span className=\"content\">{department}</span>\n                      </>\n                  ) : null}\n                  {division ? (\n                      <>\n                          <span className=\"title\">Division</span>\n                          <span className=\"content\">{division}</span>\n                      </>\n                  ) : null}\n                  {contact ? (\n                      <>\n                          <span className=\"title\">Contact</span>\n                          <span className=\"content\">{contact}</span>\n                      </>\n                  ) : null}\n                  {creditline ? (\n                      <>\n                          <span className=\"title\">Credit</span>\n                          <span className=\"content\">{creditline}</span>\n                      </>\n                  ) : null}\n                  {description ? (\n                      <>\n                          <span className=\"title\">Description</span>\n                          <span className=\"content\">{description}</span>\n                      </>\n                  ) : null}\n                  {style ? (\n                      <>\n                          <span className=\"title\">Style</span>\n                          <span className=\"content\">{style}</span>\n                      </>\n                  ) : null}\n              </section>\n              <section className=\"photos\">\n                  {images && images.length > 0\n                      ?\n                      images.map(\n                          image => <img key={image.baseimageurl} src={image.baseimageurl} />)\n                      : primaryimageurl ?\n                          <img src={primaryimageurl} alt={description} /> :\n                          null\n                  }\n\n              </section>\n          </div>\n      </main>\n  );\n}\n\nexport default Feature;","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\nconst Loading = () => {\n    return (\n        <div id=\"loading\">\n            <h2 className=\"message\">Searching...</h2>\n        </div>\n    )\n}\nexport default Loading;","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\n\n import { fetchQueryResultsFromURL } from \"../api\";\n\n const Preview = ({\n   setSearchResults,\n   setFeaturedResult,\n   setIsLoading,\n   searchResults,\n }) => {\n   const { info, records } = searchResults;\n \n   /**\n    * Don't touch this function, it's good to go.\n    *\n    * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n    */\n   async function fetchPage(pageUrl) {\n     setIsLoading(true);\n \n     try {\n       const results = await fetchQueryResultsFromURL(pageUrl);\n       setSearchResults(results);\n     } catch (error) {\n       console.error(error);\n     } finally {\n       setIsLoading(false);\n     }\n   }\n   return (\n     <aside id=\"preview\">\n       <header className=\"pagination\">\n         <button\n           disabled={!info.prev}\n           className=\"previous\"\n           onClick={() => {\n             fetchPage(info.prev);\n           }}\n         >\n           Previous\n         </button>\n         <button\n           disabled={!info.next}\n           className=\"next\"\n           onClick={() => {\n             fetchPage(info.next);\n           }}\n         >\n           Next\n         </button>\n       </header>\n       <section className=\"results\">\n         {records.map((record) => {\n           const { id, primaryimageurl, description, title } = record;\n \n           return (\n             <div\n               key={id}\n               className=\"object-preview\"\n               onClick={(event) => {\n                 event.preventDefault();\n                 setFeaturedResult(record);\n               }}\n             >\n               {primaryimageurl ? (\n                 <img src={primaryimageurl} alt={description} />\n               ) : (\n                 \"\"\n               )}\n               {title ? <h3>{title}</h3> : <h3>MISSING INFO</h3>}\n             </div>\n           );\n         })}\n       </section>\n     </aside>\n   );\n };\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = ({\n  setIsLoading,\n  setSearchResults})=>{\n\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\nconst [ centuryList, setCenturyList]=useState([]);\nconst[classificationList,setClassificationList]=useState([]);\nconst[queryString,setQueryString]=useState(\"\");\nconst [century,setCentury]=useState('any');\nconst[classification,setClassification]=useState('any');\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n   useEffect(() => {\n    \n      Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n      .then(([centuries, classification]) => {\n          setCenturyList(centuries)\n          setClassificationList(classification)\n  \n      })\n   .catch (error=> {\n      console.error(error)\n    });\n   }, [])\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   *\n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   *\n   * catch: error to console.error\n   *\n   * finally: call setIsLoading, set it to false\n   */\n\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n\n        try {\n          const data = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n         return setSearchResults(data);\n        } catch (error) {\n          console.error(error);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={(event) => setQueryString(event.target.value)}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification}\n          onChange={(event) => setClassification(event.target.value)}\n        >\n          <option value=\"any\">Any</option>\n          {classificationList.map((classification) => {\n            const { id, name } = classification;\n            return (\n              <option key={id} value={name}>\n                {name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century}\n          onChange={(event) => setCentury(event.target.value)}\n        >\n          <option value=\"any\">Any</option>\n          {centuryList.map((century) => {\n            const { id, name } = century;\n            return (\n              <option value={name} key={id}>\n                {name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n};\n\nexport default Search;","import React from 'react';\n\n\n//  * Create/export a component called Title which uses this static HTML as the template:\n//  * \n const Title=()=>{\n return (\n <div id=\"title\">\n   <h1>\n     The Art Collector\n   </h1>\n   <h5>\n     Search the Harvard Art Museums' Private Collections\n   </h5>\n </div>\n )\n }\n\n export default Title;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n   Feature,\n   Loading,\n   Preview,\n   Search,\n  Title\n} from './components';\n\nconst App = () => {\n  const[searchResults,setSearchResults ]=useState({info: {}, records: []});\n  const[featuredResult,setFeaturedResult]=useState(null);\n  const[isLoading,setIsLoading]=useState(false);\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    { <Search setIsLoading={setIsLoading}\n   setSearchResults={setSearchResults}\n   \n   /> }\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    {<Preview \n     searchResults={searchResults}\n     setIsLoading ={setIsLoading }\n     setSearchResults={setSearchResults}\n     setFeaturedResult={setFeaturedResult}/>}\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    {<Feature\n     featuredResult={featuredResult}\n     setIsLoading ={setIsLoading }\n     setSearchResults={setSearchResults}/> }\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n   \n    {isLoading ? <Loading /> :null}{/* use a ternary and render null if isLoading is false */}\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\nReactDOM.render(\n  <App/>,\n  document.getElementById('app')\n);"],"sourceRoot":""}